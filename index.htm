    
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestão de Veículos na Oficina</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    
    <style>
        :root {
            --primary-color: #3b82f6; /* blue-500 */
            --secondary-color: #10b981; /* emerald-500 */
        }
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* gray-100 */
        }
        .container-app {
            max-width: 100vw;
            min-height: 100vh;
            padding: 1rem;
        }
        .status-pill {
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem; /* text-sm */
            font-weight: 600;
            white-space: nowrap;
        }
        .status-NaOficina { background-color: #fef08a; color: #a16207; } /* yellow-200 / amber-700 */
        .status-AguardandoAprovacao { background-color: #fecaca; color: #b91c1c; } /* red-200 / red-700 */
        .status-EmExecucao { background-color: #bfdbfe; color: #1e40af; } /* blue-200 / blue-800 */
        .status-Entregue { background-color: #a7f3d0; color: #065f46; } /* emerald-200 / emerald-800 */

        /* Custom styles for mobile first */
        .vehicle-card {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
            transition: transform 0.2s;
        }
        .vehicle-card:hover {
            transform: translateY(-2px);
        }
        .img-placeholder {
            width: 100%;
            aspect-ratio: 4/3; /* Proporção de foto de veículo */
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #f8f9fa;
            color: #6c757d;
            font-size: 0.875rem;
            border-radius: 0.5rem;
            object-fit: cover;
            border: 2px dashed #dee2e6;
            transition: all 0.3s ease;
        }
        .img-placeholder:hover {
            border-color: #3b82f6;
            color: #3b82f6;
        }
        /* Modal specific styling */
        .modal-overlay {
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 50;
        }
        .modal-content {
            z-index: 50;
            max-height: 90vh;
            overflow-y: auto;
        }
        /* Report View Styling (for print) */
        @media print {
            body * { 
                visibility: hidden; 
                margin: 0 !important;
                padding: 0 !important;
            }
            
            #report-section, 
            #report-section * { 
                visibility: visible; 
            }
            
            #report-section {
                position: absolute !important;
                left: 0 !important;
                top: 0 !important;
                width: 100% !important;
                margin: 0 !important;
                padding: 0 !important;
                background: white !important;
                box-shadow: none !important;
                border: none !important;
            }
            
            .no-print { 
                display: none !important; 
            }
            
            .status-pill {
                border: 1px solid #333 !important;
                background-color: white !important;
                color: #333 !important;
                -webkit-print-color-adjust: exact;
                print-color-adjust: exact;
            }
            
            .vehicle-card {
                break-inside: avoid;
                page-break-inside: avoid;
            }
            
            img {
                max-width: 100% !important;
                height: auto !important;
            }
        }

        .compression-info {
            font-size: 0.75rem;
            color: #6b7280;
            margin-top: 0.25rem;
        }
    </style>
</head>
<body>

    <div id="app" class="container-app mx-auto">
        <header class="no-print bg-white shadow-lg rounded-xl p-4 mb-6 sticky top-0 z-10">
            <h1 class="text-2xl font-bold text-gray-800 flex items-center">
                <i data-lucide="car-repair" class="w-6 h-6 mr-3 text-blue-500"></i>
                Gestão de Oficina
            </h1>
            <p class="text-sm text-gray-500 mt-1">Conferência de Veículos em Tempo Real</p>
            <div class="mt-3 flex flex-col sm:flex-row sm:justify-between sm:items-center">
                <button onclick="openVehicleModal()" class="w-full sm:w-auto mt-2 sm:mt-0 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out">
                    <i data-lucide="plus" class="w-5 h-5 inline mr-1"></i>
                    Adicionar Veículo
                </button>
                <div class="flex space-x-2 mt-3 sm:mt-0">
                    <button onclick="generateReport('pdf')" class="w-1/2 sm:w-auto bg-emerald-500 hover:bg-emerald-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out text-sm">
                        <i data-lucide="file-text" class="w-4 h-4 inline mr-1"></i>
                        Gerar PDF
                    </button>
                    <button onclick="generateReport('whatsapp')" class="w-1/2 sm:w-auto bg-green-500 hover:bg-green-600 text-white font-semibold py-2 px-4 rounded-lg shadow-md transition duration-150 ease-in-out text-sm">
                        <i data-lucide="message-square" class="w-4 h-4 inline mr-1"></i>
                        Resumo WhatsApp
                    </button>
                </div>
            </div>
            <p id="user-info" class="text-xs mt-3 text-gray-400 truncate">Armazenamento Local | Veículos: <span id="vehicle-count">0</span></p>
            <p id="storage-info" class="text-xs text-gray-500 mt-1"></p>
        </header>

        <div id="loading" class="text-center py-10 text-gray-500">
            <svg class="animate-spin h-8 w-8 text-blue-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            <p class="mt-2">Carregando dados...</p>
        </div>

        <div id="vehicle-list" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            </div>

        <div id="empty-state" class="hidden text-center py-20 bg-white rounded-xl shadow-lg mt-6">
            <i data-lucide="car-off" class="w-12 h-12 mx-auto text-gray-400"></i>
            <p class="mt-4 text-gray-600 font-semibold">Nenhum veículo registrado.</p>
            <p class="text-sm text-gray-500">Clique em "Adicionar Veículo" para começar a conferência.</p>
        </div>

        <div id="report-section" class="hidden p-6">
            <h2 class="text-2xl font-bold mb-4 text-gray-800">Relatório de Conferência de Veículos</h2>
            <div id="report-content"></div>
            <div id="report-stats" class="mt-6 p-4 rounded-lg bg-gray-100 border border-gray-200"></div>
        </div>
    </div>

    <div id="vehicle-modal" class="hidden fixed inset-0 modal-overlay flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-lg modal-content">
            <div class="p-6">
                <h2 id="modal-title" class="text-xl font-bold mb-4 text-gray-800">Adicionar Novo Veículo</h2>
                <form id="vehicle-form">
                    <input type="hidden" id="vehicle-id">
                    <input type="hidden" id="rearPhotoBase64" value="">
                    <input type="hidden" id="keyPhotoBase64" value="">
                    
                    <div class="mb-4">
                        <label for="plate" class="block text-sm font-medium text-gray-700">Placa (Mercosul/Antiga)</label>
                        <input type="text" id="plate" required maxlength="8"
                            class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 uppercase"
                            placeholder="Ex: ABC1234 ou ABC1D23" oninput="formatPlate(this)">
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="mb-4">
                            <label for="make" class="block text-sm font-medium text-gray-700">Marca</label>
                            <input type="text" id="make" required class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="mb-4">
                            <label for="model" class="block text-sm font-medium text-gray-700">Modelo</label>
                            <input type="text" id="model" required class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                    </div>

                    <div class="grid grid-cols-3 gap-4">
                        <div class="mb-4 col-span-1">
                            <label for="year" class="block text-sm font-medium text-gray-700">Ano</label>
                            <input type="number" id="year" required min="1900" max="2099"
                                class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                        <div class="mb-4 col-span-2">
                            <label for="color" class="block text-sm font-medium text-gray-700">Cor</label>
                            <input type="text" id="color" required
                                class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500">
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="status" class="block text-sm font-medium text-gray-700">Status na Oficina</label>
                        <select id="status" required class="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm p-3 focus:ring-blue-500 focus:border-blue-500 appearance-none bg-white">
                            <option value="Na Oficina">Na Oficina</option>
                            <option value="Aguardando Aprovação">Aguardando Aprovação</option>
                            <option value="Em Execucao">Em Execução</option>
                            <option value="Entregue">Entregue</option>
                        </select>
                    </div>

                    <p class="text-sm font-medium text-gray-700 mt-6 mb-2">Registro Fotográfico <span class="text-xs text-gray-500">(Opcional)</span></p>
                    <div class="grid grid-cols-2 gap-4 mb-6">
                        <div>
                            <label class="block text-xs font-medium text-gray-500 mb-1">Foto da Traseira</label>
                            <div id="rear-photo-preview" class="img-placeholder mb-2 flex flex-col items-center justify-center">
                                <i data-lucide="camera" class="w-6 h-6 mb-1"></i>
                                Traseira
                            </div>
                            <button type="button" onclick="triggerCamera('rear')" class="w-full flex items-center justify-center py-2 text-sm bg-indigo-500 hover:bg-indigo-600 text-white font-semibold rounded-lg shadow-md transition">
                                <i data-lucide="camera" class="w-4 h-4 mr-1"></i> Capturar
                            </button>
                            <div id="rear-photo-size" class="compression-info"></div>
                        </div>
                        <div>
                            <label class="block text-xs font-medium text-gray-500 mb-1">Foto da Chave</label>
                            <div id="key-photo-preview" class="img-placeholder mb-2 flex flex-col items-center justify-center">
                                <i data-lucide="key" class="w-6 h-6 mb-1"></i>
                                Chave
                            </div>
                            <button type="button" onclick="triggerCamera('key')" class="w-full flex items-center justify-center py-2 text-sm bg-indigo-500 hover:bg-indigo-600 text-white font-semibold rounded-lg shadow-md transition">
                                <i data-lucide="key" class="w-4 h-4 mr-1"></i> Capturar
                            </button>
                            <div id="key-photo-size" class="compression-info"></div>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-3">
                        <button type="button" onclick="closeVehicleModal()" class="px-4 py-2 text-gray-600 bg-gray-200 hover:bg-gray-300 font-semibold rounded-lg transition">Cancelar</button>
                        <button type="submit" id="save-button" class="px-4 py-2 text-white bg-blue-500 hover:bg-blue-600 font-semibold rounded-lg transition shadow-md">Salvar Veículo</button>
                    </div>
                    <p id="error-message" class="text-red-500 text-sm mt-3 hidden">Erro ao salvar. Verifique os campos.</p>
                </form>
            </div>
        </div>
    </div>
    
    <input type="file" id="rear-photo-input" accept="image/*" capture="environment" class="hidden">
    <input type="file" id="key-photo-input" accept="image/*" capture="environment" class="hidden">


    <div id="confirm-modal" class="hidden fixed inset-0 modal-overlay flex items-center justify-center p-4">
        <div class="bg-white rounded-xl shadow-2xl w-full max-w-sm p-6 text-center">
            <i data-lucide="alert-triangle" class="w-10 h-10 mx-auto text-red-500 mb-4"></i>
            <p id="confirm-message" class="text-gray-700 font-medium mb-6">Tem certeza que deseja excluir este veículo?</p>
            <div class="flex justify-center space-x-4">
                <button onclick="closeConfirmModal(false)" class="px-4 py-2 text-gray-600 bg-gray-200 hover:bg-gray-300 font-semibold rounded-lg transition">Cancelar</button>
                <button id="confirm-action-button" onclick="closeConfirmModal(true)" class="px-4 py-2 text-white bg-red-500 hover:bg-red-600 font-semibold rounded-lg transition shadow-md">Excluir</button>
            </div>
        </div>
    </div>

    <script>
        // --- Variáveis Globais ---
        let vehiclesData = []; // Cache local dos dados dos veículos
        const STORAGE_KEY = 'gestao_oficina_veiculos';
        const MAX_STORAGE_SIZE = 5 * 1024 * 1024; // 5MB limite máximo
        const MAX_IMAGE_SIZE = 100 * 1024; // 100KB por imagem

        // --- Variáveis Globais de Input da Câmera ---
        // Eles ainda são referenciados corretamente, apesar de estarem fora do form
        const rearPhotoInput = document.getElementById('rear-photo-input');
        const keyPhotoInput = document.getElementById('key-photo-input');

        // --- Funções de Local Storage ---
        
        /**
         * Calcula o tamanho atual do armazenamento
         */
        const getCurrentStorageSize = () => {
            try {
                let totalSize = 0;
                for (let key in localStorage) {
                    if (localStorage.hasOwnProperty(key)) {
                        totalSize += localStorage[key].length * 2; // UTF-16 characters
                    }
                }
                return totalSize;
            } catch (error) {
                console.error('Erro ao calcular tamanho do storage:', error);
                return 0;
            }
        };

        /**
         * Verifica se há espaço suficiente no armazenamento
         */
        const hasEnoughStorage = (additionalSize = 0) => {
            const currentSize = getCurrentStorageSize();
            return (currentSize + additionalSize) <= MAX_STORAGE_SIZE;
        };

        /**
         * Salva os veículos no Local Storage
         */
        const saveVehiclesToStorage = () => {
            try {
                // Remove imagens muito antigas se necessário
                if (!hasEnoughStorage()) {
                    cleanupOldImages();
                }

                const dataToSave = JSON.stringify(vehiclesData);
                
                if (!hasEnoughStorage(dataToSave.length)) {
                    throw new Error('Armazenamento insuficiente. Tente remover algumas imagens ou veículos antigos.');
                }

                localStorage.setItem(STORAGE_KEY, dataToSave);
                updateStorageInfo();
                return true;
            } catch (error) {
                console.error('Erro ao salvar no Local Storage:', error);
                return false;
            }
        };

        /**
         * Remove imagens de veículos antigos para liberar espaço
         */
        const cleanupOldImages = () => {
            try {
                // Ordena veículos por timestamp (mais antigos primeiro)
                const sortedVehicles = [...vehiclesData].sort((a, b) => 
                    new Date(a.timestamp) - new Date(b.timestamp)
                );

                // Remove imagens dos veículos mais antigos
                for (let vehicle of sortedVehicles) {
                    if (vehicle.rearPhotoBase64 || vehicle.keyPhotoBase64) {
                        vehicle.rearPhotoBase64 = '';
                        vehicle.keyPhotoBase64 = '';
                        console.log('Imagens removidas do veículo:', vehicle.plate);
                        
                        // Verifica se já liberou espaço suficiente
                        if (hasEnoughStorage()) {
                            break;
                        }
                    }
                }

                // Salva as alterações
                saveVehiclesToStorage();
            } catch (error) {
                console.error('Erro ao limpar imagens antigas:', error);
            }
        };

        /**
         * Atualiza informações de armazenamento na UI
         */
        const updateStorageInfo = () => {
            try {
                const currentSize = getCurrentStorageSize();
                const percentage = (currentSize / MAX_STORAGE_SIZE) * 100;
                const usedMB = (currentSize / 1024 / 1024).toFixed(2);
                const maxMB = (MAX_STORAGE_SIZE / 1024 / 1024).toFixed(2);
                
                let color = 'text-green-500';
                if (percentage > 80) color = 'text-red-500';
                else if (percentage > 60) color = 'text-yellow-500';

                document.getElementById('storage-info').innerHTML = 
                    `Armazenamento: <span class="${color} font-semibold">${usedMB}MB / ${maxMB}MB (${percentage.toFixed(1)}%)</span>`;
            } catch (error) {
                console.error('Erro ao atualizar info de storage:', error);
            }
        };

        /**
         * Carrega os veículos do Local Storage
         */
        const loadVehiclesFromStorage = () => {
            try {
                const stored = localStorage.getItem(STORAGE_KEY);
                if (stored) {
                    const parsed = JSON.parse(stored);
                    // Garante que cada veículo tenha um ID
                    parsed.forEach(vehicle => {
                        if (!vehicle.id) {
                            vehicle.id = generateId();
                        }
                    });
                    return parsed;
                }
                return [];
            } catch (error) {
                console.error('Erro ao carregar do Local Storage:', error);
                return [];
            }
        };

        /**
         * Gera um ID único para os veículos
         */
        const generateId = () => {
            return Date.now().toString(36) + Math.random().toString(36).substr(2);
        };

        // --- Inicialização da Aplicação ---
        const initializeApp = () => {
            // Carrega dados do Local Storage
            vehiclesData = loadVehiclesFromStorage();
            
            // Atualiza contador de veículos
            document.getElementById('vehicle-count').textContent = vehiclesData.length;
            
            // Renderiza a lista de veículos
            renderVehicleList(vehiclesData);
            
            // Atualiza informações de armazenamento
            updateStorageInfo();
            
            // Esconde o loading
            document.getElementById('loading').classList.add('hidden');
            
            // Inicializa ícones
            lucide.createIcons();
            
            console.log('Aplicação inicializada com', vehiclesData.length, 'veículos');
        };

        // --- Lógica da Câmera (Base64) ---

        /**
         * Aciona o input de arquivo (câmera)
         * @param {string} type - 'rear' ou 'key'
         */
        window.triggerCamera = (type) => {
            if (type === 'rear') {
                rearPhotoInput.click();
            } else if (type === 'key') {
                keyPhotoInput.click();
            }
        };

        /**
         * Comprime imagem de forma mais agressiva
         */
        const compressImage = (base64Data, maxWidth = 400, maxHeight = 300, quality = 0.5) => {
            return new Promise((resolve) => {
                const img = new Image();
                img.onload = function() {
                    const canvas = document.createElement('canvas');
                    const ctx = canvas.getContext('2d');
                    
                    let width = img.width;
                    let height = img.height;
                    
                    // Redimensiona mantendo a proporção
                    if (width > height) {
                        if (width > maxWidth) {
                            height = Math.round((height * maxWidth) / width);
                            width = maxWidth;
                        }
                    } else {
                        if (height > maxHeight) {
                            width = Math.round((width * maxHeight) / height);
                            height = maxHeight;
                        }
                    }
                    
                    canvas.width = width;
                    canvas.height = height;
                    
                    // Aplica compressão
                    ctx.drawImage(img, 0, 0, width, height);
                    
                    // Tenta diferentes qualidades até ficar abaixo do limite
                    let compressedData = canvas.toDataURL('image/jpeg', quality);
                    
                    // Se ainda estiver muito grande, reduz mais a qualidade
                    if (compressedData.length > MAX_IMAGE_SIZE) {
                        compressedData = canvas.toDataURL('image/jpeg', 0.3);
                    }
                    
                    // Se ainda estiver grande, reduz dimensões
                    if (compressedData.length > MAX_IMAGE_SIZE) {
                        canvas.width = Math.round(width * 0.7);
                        canvas.height = Math.round(height * 0.7);
                        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
                        compressedData = canvas.toDataURL('image/jpeg', 0.3);
                    }
                    
                    resolve(compressedData);
                };
                img.src = base64Data;
            });
        };

        /**
         * Converte a imagem capturada em Base64 e atualiza o preview/input hidden.
         */
        const handleImageCapture = async (event, base64InputId, previewId, sizeInfoId) => {
            const file = event.target.files[0];
            if (!file) return;

            // Verifica se o arquivo é uma imagem
            if (!file.type.startsWith('image/')) {
                alert('Por favor, selecione apenas imagens.');
                return;
            }

            // Verifica tamanho do arquivo original
            if (file.size > 5 * 1024 * 1024) { // 5MB
                alert('Imagem muito grande. Por favor, selecione uma imagem menor.');
                return;
            }

            const reader = new FileReader();
            reader.onloadend = async () => {
                try {
                    const originalBase64 = reader.result;
                    
                    // Mostra loading
                    const previewElement = document.getElementById(previewId);
                    previewElement.innerHTML = `
                        <div class="flex flex-col items-center justify-center">
                            <svg class="animate-spin h-6 w-6 text-blue-500 mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            <span class="text-xs">Comprimindo...</span>
                        </div>
                    `;

                    // Comprime a imagem
                    const compressedBase64 = await compressImage(originalBase64);
                    
                    // Atualiza informações de tamanho
                    const sizeKB = Math.round(compressedBase64.length / 1024);
                    document.getElementById(sizeInfoId).textContent = `${sizeKB}KB`;
                    
                    // Verifica se há espaço suficiente
                    if (!hasEnoughStorage(compressedBase64.length)) {
                        alert('Armazenamento insuficiente. A imagem não será salva. Tente remover algumas imagens antigas.');
                        resetImageFields();
                        return;
                    }

                    document.getElementById(base64InputId).value = compressedBase64;
                    previewElement.innerHTML = `<img src="${compressedBase64}" class="w-full h-full object-cover rounded-lg" alt="Preview">`;
                    previewElement.classList.remove('img-placeholder', 'bg-gray-200', 'text-gray-500');
                    
                } catch (error) {
                    console.error('Erro ao processar imagem:', error);
                    alert('Erro ao processar imagem. Tente novamente.');
                    resetImageFields();
                }
            };
            
            reader.onerror = () => {
                console.error('Erro ao ler a imagem');
                alert('Erro ao capturar a imagem. Tente novamente.');
                resetImageFields();
            };
            
            reader.readAsDataURL(file);
        };

        /**
         * Reseta os previews e inputs hidden do modal.
         */
        const resetImageFields = () => {
            document.getElementById('rearPhotoBase64').value = '';
            document.getElementById('keyPhotoBase64').value = '';
            
            const rearPreview = document.getElementById('rear-photo-preview');
            rearPreview.innerHTML = '<i data-lucide="camera" class="w-6 h-6 mb-1"></i> Traseira';
            rearPreview.className = 'img-placeholder mb-2 flex flex-col items-center justify-center bg-gray-200 text-gray-500 rounded-lg';
            
            const keyPreview = document.getElementById('key-photo-preview');
            keyPreview.innerHTML = '<i data-lucide="key" class="w-6 h-6 mb-1"></i> Chave';
            keyPreview.className = 'img-placeholder mb-2 flex flex-col items-center justify-center bg-gray-200 text-gray-500 rounded-lg';
            
            // Limpa informações de tamanho
            document.getElementById('rear-photo-size').textContent = '';
            document.getElementById('key-photo-size').textContent = '';
            
            // Reseta os inputs de arquivo
            rearPhotoInput.value = '';
            keyPhotoInput.value = '';
            
            lucide.createIcons();
        };

        // Adiciona listeners para os inputs de câmera
        rearPhotoInput.addEventListener('change', (e) => handleImageCapture(e, 'rearPhotoBase64', 'rear-photo-preview', 'rear-photo-size'));
        keyPhotoInput.addEventListener('change', (e) => handleImageCapture(e, 'keyPhotoBase64', 'key-photo-preview', 'key-photo-size'));

        // --- CRUD e Lógica de Formulário ---
        
        /**
         * Abre o modal do veículo para adicionar ou editar.
         */
        window.openVehicleModal = (vehicle = null) => {
            const modal = document.getElementById('vehicle-modal');
            const form = document.getElementById('vehicle-form');
            const modalTitle = document.getElementById('modal-title');
            const vehicleIdInput = document.getElementById('vehicle-id');
            const saveButton = document.getElementById('save-button');
            document.getElementById('error-message').classList.add('hidden');

            form.reset();
            vehicleIdInput.value = '';
            resetImageFields();

            if (vehicle) {
                modalTitle.textContent = 'Editar Veículo';
                saveButton.textContent = 'Atualizar Veículo';
                vehicleIdInput.value = vehicle.id;
                document.getElementById('plate').value = vehicle.plate || '';
                document.getElementById('make').value = vehicle.make || '';
                document.getElementById('model').value = vehicle.model || '';
                document.getElementById('year').value = vehicle.year || '';
                document.getElementById('color').value = vehicle.color || '';
                document.getElementById('status').value = vehicle.status || 'Na Oficina';
                
                // Carrega Base64 para edição
                if (vehicle.rearPhotoBase64) {
                    document.getElementById('rearPhotoBase64').value = vehicle.rearPhotoBase64;
                    document.getElementById('rear-photo-preview').innerHTML = `<img src="${vehicle.rearPhotoBase64}" class="w-full h-full object-cover rounded-lg">`;
                    document.getElementById('rear-photo-preview').classList.remove('img-placeholder');
                    const sizeKB = Math.round(vehicle.rearPhotoBase64.length / 1024);
                    document.getElementById('rear-photo-size').textContent = `${sizeKB}KB`;
                }
                if (vehicle.keyPhotoBase64) {
                    document.getElementById('keyPhotoBase64').value = vehicle.keyPhotoBase64;
                    document.getElementById('key-photo-preview').innerHTML = `<img src="${vehicle.keyPhotoBase64}" class="w-full h-full object-cover rounded-lg">`;
                    document.getElementById('key-photo-preview').classList.remove('img-placeholder');
                    const sizeKB = Math.round(vehicle.keyPhotoBase64.length / 1024);
                    document.getElementById('key-photo-size').textContent = `${sizeKB}KB`;
                }

            } else {
                modalTitle.textContent = 'Adicionar Novo Veículo';
                saveButton.textContent = 'Salvar Veículo';
                document.getElementById('status').value = 'Na Oficina';
            }

            modal.classList.remove('hidden');
            lucide.createIcons();
        };

        /**
         * Fecha o modal.
         */
        window.closeVehicleModal = () => {
            document.getElementById('vehicle-modal').classList.add('hidden');
            document.getElementById('vehicle-form').reset();
            document.getElementById('vehicle-id').value = '';
            resetImageFields();
        };

        /**
         * Manipula o envio do formulário.
         */
        document.getElementById('vehicle-form').addEventListener('submit', async (e) => {
            e.preventDefault();

            const id = document.getElementById('vehicle-id').value;
            const plateInput = document.getElementById('plate');
            const plate = plateInput.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            
            if (plate.length < 7) {
                 document.getElementById('error-message').textContent = 'Placa inválida. Mínimo de 7 caracteres (limpos).';
                 document.getElementById('error-message').classList.remove('hidden');
                 return;
            }

            const vehicleData = {
                plate: plate,
                make: document.getElementById('make').value.trim(),
                model: document.getElementById('model').value.trim(),
                year: parseInt(document.getElementById('year').value),
                color: document.getElementById('color').value.trim(),
                status: document.getElementById('status').value,
                rearPhotoBase64: document.getElementById('rearPhotoBase64').value || '',
                keyPhotoBase64: document.getElementById('keyPhotoBase64').value || '',
                timestamp: new Date().toISOString()
            };

            const saveButton = document.getElementById('save-button');
            saveButton.disabled = true;
            saveButton.textContent = id ? 'Atualizando...' : 'Salvando...';
            document.getElementById('error-message').classList.add('hidden');

            try {
                if (id) {
                    // Edição
                    const index = vehiclesData.findIndex(v => v.id === id);
                    if (index !== -1) {
                        vehicleData.id = id;
                        vehiclesData[index] = vehicleData;
                    }
                } else {
                    // Adição
                    vehicleData.id = generateId();
                    vehiclesData.unshift(vehicleData);
                }
                
                // Salva no Local Storage
                const success = saveVehiclesToStorage();
                if (!success) {
                    throw new Error('Erro ao salvar no armazenamento local. Tente remover algumas imagens.');
                }
                
                // Atualiza a UI
                document.getElementById('vehicle-count').textContent = vehiclesData.length;
                renderVehicleList(vehiclesData);
                closeVehicleModal();

            } catch (error) {
                console.error("Erro ao salvar/atualizar o veículo:", error);
                document.getElementById('error-message').textContent = `Erro: ${error.message}`;
                document.getElementById('error-message').classList.remove('hidden');
            } finally {
                saveButton.disabled = false;
                saveButton.textContent = id ? 'Atualizar Veículo' : 'Salvar Veículo';
            }
        });

        /**
         * Abre o modal de confirmação para exclusão.
         */
        window.confirmDelete = (id) => {
            const confirmModal = document.getElementById('confirm-modal');
            const confirmButton = document.getElementById('confirm-action-button');
            
            confirmButton.setAttribute('onclick', `deleteVehicle('${id}')`);
            document.getElementById('confirm-message').textContent = 'Tem certeza que deseja excluir este veículo? Esta ação é irreversível.';
            confirmModal.classList.remove('hidden');
        };

        /**
         * Fecha o modal de confirmação.
         */
        window.closeConfirmModal = (executeAction) => {
            document.getElementById('confirm-modal').classList.add('hidden');
        };

        /**
         * Exclui um veículo do Local Storage.
         */
        window.deleteVehicle = (id) => {
            closeConfirmModal(false);
            
            try {
                vehiclesData = vehiclesData.filter(v => v.id !== id);
                
                const success = saveVehiclesToStorage();
                if (!success) {
                    throw new Error('Erro ao salvar no armazenamento local');
                }
                
                document.getElementById('vehicle-count').textContent = vehiclesData.length;
                renderVehicleList(vehiclesData);
                
            } catch (error) {
                console.error("Erro ao excluir o veículo:", error);
                alert('Erro ao excluir veículo: ' + error.message);
            }
        };

        // --- Lógica da Placa ---
        window.formatPlate = (input) => {
            let value = input.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
            let formattedValue = '';

            if (value.length > 3) {
                formattedValue = value.substring(0, 3) + '-' + value.substring(3);
            } else {
                formattedValue = value;
            }

            if (formattedValue.length > 8) {
                formattedValue = formattedValue.substring(0, 8);
            }

            input.value = formattedValue;
        };

        // --- Renderização da Lista ---
        const getImageBlock = (base64Data, label) => {
            if (base64Data) {
                return `
                    <div class="bg-gray-50 rounded-lg p-2 border">
                        <div class="img-placeholder aspect-video p-0">
                            <img src="${base64Data}" class="w-full h-full object-cover rounded-md" alt="${label}">
                        </div>
                        <span class="text-xs text-gray-500 mt-1 block text-center">${label}</span>
                    </div>
                `;
            } else {
                return `
                    <div class="bg-gray-50 rounded-lg p-2 border">
                        <div class="img-placeholder aspect-video flex flex-col items-center justify-center text-gray-500">
                            <i data-lucide="${label === 'Traseira' ? 'camera' : 'key'}" class="w-6 h-6 mb-1"></i>
                            <span class="text-xs">${label}</span>
                        </div>
                        <span class="text-xs text-gray-500 mt-1 block text-center">${label}</span>
                    </div>
                `;
            }
        };

        const renderVehicleList = (vehicles) => {
            const listContainer = document.getElementById('vehicle-list');
            listContainer.innerHTML = '';

            if (vehicles.length === 0) {
                document.getElementById('empty-state').classList.remove('hidden');
                return;
            }

            document.getElementById('empty-state').classList.add('hidden');

            vehicles.forEach(vehicle => {
                const card = document.createElement('div');
                card.className = 'vehicle-card bg-white rounded-xl p-5 border border-gray-200';
                
                const rearPhotoBlock = getImageBlock(vehicle.rearPhotoBase64, 'Traseira');
                const keyPhotoBlock = getImageBlock(vehicle.keyPhotoBase64, 'Chave');

                card.innerHTML = `
                    <div class="flex justify-between items-start mb-3">
                        <span class="text-xl font-extrabold text-gray-800">${vehicle.make} / ${vehicle.model}</span>
                        <div class="status-pill status-${vehicle.status.replace(/\s/g, '')}">${vehicle.status}</div>
                    </div>

                    <div class="mb-4">
                        <p class="text-3xl font-bold tracking-widest text-blue-600">${vehicle.plate.substring(0,3)}-${vehicle.plate.substring(3)}</p>
                        <p class="text-sm text-gray-500 mt-1">${vehicle.color} | ${vehicle.year}</p>
                    </div>

                    <div class="grid grid-cols-2 gap-3 mb-4 text-center">
                        ${rearPhotoBlock}
                        ${keyPhotoBlock}
                    </div>

                    <div class="flex space-x-2 mt-4 border-t pt-4">
                        <button onclick='openVehicleModal(${JSON.stringify(vehicle).replace(/'/g, "\\'")})' class="flex-1 flex items-center justify-center py-2 bg-yellow-500 hover:bg-yellow-600 text-white font-semibold rounded-lg text-sm transition">
                             <i data-lucide="square-pen" class="w-4 h-4 mr-1"></i> Editar
                        </button>
                        <button onclick="confirmDelete('${vehicle.id}')" class="flex-1 flex items-center justify-center py-2 bg-red-500 hover:bg-red-600 text-white font-semibold rounded-lg text-sm transition">
                            <i data-lucide="trash" class="w-4 h-4 mr-1"></i> Excluir
                        </button>
                    </div>
                `;
                listContainer.appendChild(card);
            });
            lucide.createIcons();
        };

        // --- Geração de Relatórios ---
        window.generateReport = (type) => {
            if (vehiclesData.length === 0) {
                alert('Nenhum veículo cadastrado para gerar relatório.');
                return;
            }

            const reportContent = document.getElementById('report-content');
            const reportStats = document.getElementById('report-stats');
            const reportSection = document.getElementById('report-section');
            
            let summary = '';

            // Estatísticas
            const statusCounts = vehiclesData.reduce((acc, v) => {
                acc[v.status] = (acc[v.status] || 0) + 1;
                return acc;
            }, {});

            let statsHtml = `
                <div class="mb-6 p-4 bg-gray-50 rounded-lg">
                    <h3 class="font-bold text-lg mb-3 text-gray-800">Estatísticas Gerais</h3>
                    <div class="grid grid-cols-2 gap-2">
            `;
            
            let statsText = `📊 *ESTATÍSTICAS DO RELATÓRIO*\n\n`;
            statsText += `Total de Veículos: ${vehiclesData.length}\n\n`;

            for (const [status, count] of Object.entries(statusCounts)) {
                const percentage = ((count / vehiclesData.length) * 100).toFixed(1);
                statsHtml += `
                    <div class="flex justify-between items-center py-1">
                        <span class="text-sm font-medium text-gray-700">${status}</span>
                        <div class="flex items-center gap-2">
                            <span class="text-sm font-bold text-gray-900">${count}</span>
                            <span class="text-xs text-gray-500">(${percentage}%)</span>
                        </div>
                    </div>
                `;
                statsText += `• ${status}: ${count} veículos (${percentage}%)\n`;
            }
            
            statsHtml += `</div></div>`;
            statsText += `\n`;
            
            reportStats.innerHTML = statsHtml;

            // Lista detalhada
            let listHtml = `
                <div class="mt-6">
                    <h3 class="font-bold text-lg mb-3 text-gray-800">Lista de Veículos</h3>
                    <div class="space-y-4">
            `;
            
            let listText = `🚗 *LISTA DE VEÍCULOS*\n\n`;

            vehiclesData.forEach((v, index) => {
                const formattedPlate = v.plate.length > 3 ? 
                    `${v.plate.substring(0, 3)}-${v.plate.substring(3)}` : v.plate;
                
                listHtml += `
                    <div class="border border-gray-200 rounded-lg p-4 bg-white">
                        <div class="flex justify-between items-start mb-3">
                            <div>
                                <h4 class="font-bold text-lg text-gray-800">${formattedPlate}</h4>
                                <p class="text-sm text-gray-600">${v.make} ${v.model} • ${v.year} • ${v.color}</p>
                            </div>
                            <span class="status-pill status-${v.status.replace(/\s/g, '')}">${v.status}</span>
                        </div>
                    </div>
                `;
                
                listText += `*Veículo ${index + 1}:*\n`;
                listText += `Placa: ${formattedPlate}\n`;
                listText += `Modelo: ${v.make} ${v.model}\n`;
                listText += `Ano/Cor: ${v.year} • ${v.color}\n`;
                listText += `Status: ${v.status}\n`;
                listText += `---\n\n`;
            });

            listHtml += `</div></div>`;
            reportContent.innerHTML = listHtml;

            if (type === 'pdf') {
                const timestamp = new Date().toLocaleString('pt-BR', {
                    day: '2-digit',
                    month: '2-digit',
                    year: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                document.querySelector('#report-section h2').textContent = 
                    `Relatório de Veículos - ${timestamp}`;
                
                reportSection.classList.remove('hidden');
                
                setTimeout(() => {
                    window.print();
                    setTimeout(() => {
                        reportSection.classList.add('hidden');
                    }, 500);
                }, 1000);

            } else if (type === 'whatsapp') {
                const timestamp = new Date().toLocaleDateString('pt-BR');
                const whatsappText = `*RELATÓRIO DA OFICINA*\nData: ${timestamp}\n\n${statsText}\n${listText}\n_Relatório gerado automaticamente_`;
                
                const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(whatsappText)}`;
                window.open(whatsappUrl, '_blank');
            }
        };

        // Inicia a aplicação quando a página carregar
        window.onload = initializeApp;
    </script>
</body>
</html>
